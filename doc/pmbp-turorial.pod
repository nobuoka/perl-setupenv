=head1 NAME

Tutorial for pmbp.pl, a Perl application dependency management tool

=head1 ABSTRACT

This document describes how to use the C<pmbp.pl> script and how the
script installs or resolves dependency of the application.

=head1 GETTING STARTED

First, download the C<pmbp.pl> script by:

  $ curl http://wakaba.github.io/packages/pmbp | sh

Assuming your appication's Perl scripts and modules are put into
directories C<bin>, C<lib>, C<script>, and/or C<t>, the following
command scans dependency of your application:

  $ perl local/bin/pmbp.pl --update

... and the result list of Perl modules is saved as
C<config/perl/pmb-install.txt>.  Moreover, tarballs of those modules
are saved within C<deps/pmtar> and pure-Perl modules are expanded into
C<deps/pmpp>.  These two directories are initialized as Git
repositories.  You can register them as Git submodules such that the
revision of the application can be linked with the specific set of
dependent Perl modules.  If you don't want to save the complete set of
tarballs in your Git repository, you can simply ignore these two
directories.  Anyway, you should add C<config/perl/pmb-install.txt> to
your application's repository such that the next process don't have to
repeat the scanning process.

Then, the following command install the required Perl modules into the
C<local/> directory:

  $ perl local/bin/pmbp.pl --install

If there is C<config/perl/pmb-install.txt>, the command installs Perl
modules listed in the file.  Otherwise the command scans for the
dependency as C<--update> does and then install the detected
dependency.

You have to run the C<--update> command only when the list of required
modules should be updated.

Now that required Perl modules are installed into the C<local>
directory, you can use the installed module by:

  $ PERL5LIB="`cat config/perl/libs.txt`" perl bin/myapp.pl args

The file C<config/perl/libs.txt> is created by C<--install>,
containing paths to the Perl module within the C<local> directory.
Alternatively, you can use the "shortcut" script:

  $ local/bin/perl bin/myapp.pl args

If you feel it's still too long, invoke the following command:

  $ perl local/bin/pmbp.pl --create-perl-command-shortcut perl

... so that you can start your application by:

  $ ./perl bin/myapp.pl args

The C<perl> shell script sets environment variables appropriately and
then invoke the real C<perl> command.

=head1 BASIC USAGE

=head2 Creating list of required Perl modules

By default the pmbp script try to do its best to detect Perl module
dependency, as mentioned in earlier section.  It examined Perl scripts
in the C<bin> directory and Perl modules in the C<lib> directory and
extract C<use> and C<require> statements to create list of Perl
modules that should be installed for the execution of the application.
Apparenrly this dependency detection is incomplete, though it should
work well for small applications.  There are complex ways to load
external Perl modules, including C< eval qq{ use $module } >.
Sometimes there are Git submodules containing Perl modules, which
should also taken into account when detecting dependency of the
application.

You can notify the pmbp script of the list of Perl modules actually
required by the application, by putting their names into the file
C<config/perl/modules.txt>, like:

  AnyEvent::HTTP
  Exporter::Lite
  Path::Class
  Test::Differences

If there is the file, the pmbp script use it as the list of required
modules instead of sniffing Perl modules by itself.

This file can be generated by the following command, which sniffs Perl
scripts and modules in C<bin>, C<lib>, and similar directories:

  $ mkdir -p config/perl
  $ perl local/bin/pmbp.pl --print-scanned-dependency . \
        > config/perl/modules.txt

... but the sniffer is not perfect and you might want to edit the file
by hand.

=head2 Merging dependency of submodules

If your application requires modules contained in other Git
repositories, make them Git submodules of the application (given that
your application itself is maintained as a Git repository), putting
under the C<modules> directory:

  $ git submodule add git://github.com/wakaba/dongry modules/dongry
  $ ls modules
  dongry perl-json-functions-xs

Then the pmbp script recognizes the submodules under the C<modules>
directory and merge their dependency list into main application's
list.

Dependency of submodules can be described in the same format as the
main application's list.  For example, the submodule C<modules/dongry>
can contain the file C<modules/dongry/config/perl/modules.txt>, which
descirbes its dependency.  Note that the pmbp script also supports
other dependency description formats, including: C<Makefile.PL>,
C<Build.PL>, C<cpanfile>, and C<carton.lock>.  If one of these files
are included in the submodule, its required modules are extracted from
that file.  When none of these files are found, then the pmbp script
try to extract required modules by sniffing Perl script and module
files, as described in the earlier section for the main application.

Submodules of submodules are not supported at the moment.

=head2 Constructing Perl module repository for your application

It is often desired to create local repository that contains source
packages for modules required by your application, for faster or
networkless installation of them.  The pmbp.pl script has native
support for such "bundling" usage.  Run the script with the
C<--update> command:

  $ perl local/bin/pmbp.pl --update

This command scans the Perl modules required directly or indirectly by
the application and put their tarballs into the C<deps/pmtar>
directory.  In addition, it installs pure-Perl modules into the
C<deps/pmpp> directory.  Finally, it generates the
C<config/perl/pmb-install.txt>, which lists the name and version of
Perl modules required directly or indirectly by the application.

The C<--install> command takes these files into account when
installing modules.  Instead of examining the required module
directly, the C<--install> command use the
C<config/perl/pmb-install.txt> file as the input.  It copies pure Perl
modules from the C<deps/pmpp> directory and then install XS modules,
using tarballs in the C<deps/pmtar> directory.

If your application is a Git repository, the
C<config/perl/pmb-install.txt> file should be added to the repository.
In addition, the C<deps/pmtar> and C<deps/pmpp> directories should be
maintained as Git submodules of the application repository.

You need to run the C<--update> command again when you added required
Perl module into the source list (e.g. C<config/perl/modules.txt>), or
you'd like to update CPAN modules to latest version.  You should add
updated files to relevant Git repositories.

=head1 COOKBOOK

=head2 Install mod_perl

It is highly recommended to install Perl for your application before
installing mod_perl, as system-provided Perl installation is sometimes
configured in the way our mod_perl cannot be compiled with it.

  # For mod_perl2
  $ perl local/bin/pmbp.pl \
        --perl-version=5.12.4 \
        --install-perl \
        --install-perl-module mod_perl2

  # For mod_perl1
  $ perl local/bin/pmbp.pl \
        --perl-version=5.12.4 \
        --install-perl \
        --install-perl-module mod_perl \
        --install-perl-module libapreq # optional

Apache HTTP Server 1.3 (for mod_perl1) or 2.2 (for mod_perl2) is
automatically installed into the directory C<local/apache/httpd-*>.
(We don't use system's Apache installation as different systems have
different configurations of Apache such that it is too difficult to
improve portability.)

Please note that, at the time of writing, mod_perl2 cannot be compiled
with Perl 5.14 or later.  See
<http://stackoverflow.com/questions/10564006/why-is-perl-5-14-using-0gvgpgv-gp-cv-definition-for-gvgc>
for details.

=head2 Install profiler

Install profiler module L<Devel::NYTProf> into the working directory:

  $ perl local/bin/pmbp.pl \
        --install-module Devel::NYTProf \
        --create-perl-command-shortcut nytprofhtml

Since the module is not used by the application itself, you have to
explicitly specify the module name with the C<--install-module>
command.  The L<Devel::NYTProf> module provides several standalone
Perl scripts such as C<nytprofhtml>.  For convenience, let the pmbp
script create a shortcut to the command to the application's root
directory.  At this time, you can run your application with profiler:

  $ ./perl -d:NYTProf bin/myapp.pl
  $ ./nytprofhtml

=head2 Install an old version of CPAN module

  $ perl local/bin/pmbp.pl \
        --install-module ExtUtils::ParseXS~3.18=http://search.cpan.org/CPAN/authors/id/S/SM/SMUELLER/ExtUtils-ParseXS-3.18.tar.gz

=head2 Inspect complex module dependency

The detailed log file contains which module requires a module so that
it is to be installed.  Therefore, the following command would
generate such a log file for the application:

  $ perl local/bin/pmbp.pl --update --preserve-info-file

Don't forget the C<--preserve-info-file> option.  Unless this option,
the detialed log file is deleted at the end of the pmbp script if the
process has been succeeded.

Then, read the log file by your favorite pager or editor and find the
module in question.

If your application or submodule does not directly require the module
in question, but it is referenced indirectly by some CPAN module, it
will not appear in the log file.  Instead, you can try the dependency
graph generation command:

  $ perl local/bin/pmbp.pl --update --write-dep-graph output.txt

The C<--write-dep-graph> command generates a tab-separated text file
whose line represents "from" and "to" nodes of the dependency graph.
In other word, the module in the first column requires the module in
the second column.  The root application is represented by ".".  For
example:

  .	Data::Dumper
  .	modules/dongry
  modules/dongry	Carp
  Data::Dumper	Test::More~0.98

This dependency graph represents that the application requires
modules/dongry (a submodule) and Data::Dumper, which require Carp and
Test::More, respectively.

=head2 Run a Perl application on Heroku

Define C<deps> rule in the C<Makefile> of the root directory of the
application such that C<make deps> will run setup process of the
application including invocation(s) of C<pmbp.pl> (see
<https://github.com/wakaba/perl-setupenv/blob/master/Makefile.pmbp.example>
for an example) and use
<https://github.com/wakaba/heroku-buildpack-perl-pmbp> as the Heroku
buildpack of the application.

=head1 TROUBLESHOOTING

=head2 Second invocation of pmbp --update takes as long time as the first time, nevertheless you said this should not happen :-<

Usually the C<--update> command saves Perl modules' dependency into
files in C<deps/pmtar/deps> directory.  If the application repository
is cloned at different machine such that those files are missing,
second invocation will perform the same scanning operation as the
first invocation.

In addition, if the application or a submodule of the application uses
C<Makefile.PL> or C<Build.PL> as the only way to describe their
dependency, those previously-saved files can't be used for them.
Therefore it is recommended to list up required modules in
C<config/perl/modules.txt> for them.

=head2 My application stops working after the application directory is moved into another place!

Remove the C<local> directory and re-install dependency of your
application.

=head1 LEARN MORE

There are many commands not described in this turorial.  Complete list
of available commands are included in the pod of the C<pmbp.pl>
script.  The document also describes interaction of various
environment variables.

=head1 DEPENDENCY

Perl 5.8 or later is supported by this script.  Core modules of Perl
5.8 must be available.

In addition, the C<wget> command must be available.  Some of commands
(in particular, the C<--update> command) requires the C<git> command.

Though the script depends on C<perlbrew> and C<cpanm> commands, they
are automatically downloaded from the Internet such that you don't
have to prepare these scripts.

=head1 AVAILABILITY

Latest version of the script is available at
<https://github.com/wakaba/perl-setupenv/blob/master/bin/pmbp.pl>.
Alternatively, you can update your C<pmbp.pl> script by running:
C<perl local/bin/pmbp.pl --update-pmbp-pl>.

Tests are automatically run at Travis CI:
<https://travis-ci.org/wakaba/perl-setupenv>.

Design goals and requirements are documented in:
<https://github.com/wakaba/perl-setupenv/blob/master/doc/pmbp.txt>.

=head1 SEE ALSO

For usage of various options, commands, environment variables, and
files handled by the script, see documentation embedded in the script
(or run C<perl local/bin/pmbp.pl --help>).

=head1 AUTHOR

Wakaba <wakaba@suikawiki.org>.

=head1 LICENSE

Copyright 2012-2013 Wakaba <wakaba@suikawiki.org>.

This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.

=cut
